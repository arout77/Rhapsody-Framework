<!DOCTYPE html>
<html lang="en" class="antialiased">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ meta.title }}</title>
    <meta name="description" content="{{ meta.description|e('html_attr') }}">
    
    {# Assumes the full URL is needed for canonical and OG tags #}
    {% set current_url = app_url ~ app.request.uri %}
    <link rel="canonical" href="{{ current_url }}">

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="{{ current_url }}">
    <meta property="og:title" content="{{ meta.title }}">
    <meta property="og:description" content="{{ meta.description|e('html_attr') }}">
    <meta property="og:image" content="{{ base_url }}/public/img/logo.png">

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="{{ current_url }}">
    <meta property="twitter:title" content="{{ meta.title }}">
    <meta property="twitter:description" content="{{ meta.description|e('html_attr') }}">
    <meta property="twitter:image" content="{{ base_url }}/public/img/logo.png">
    
    <link href="{{ base_url }}/public/css/style.css" rel="stylesheet">
    <script>
        // This script runs before the rest of the page to prevent "flashing"
        // It sets the theme based on the user's saved preference or OS setting.
        if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
    </script>
    <!-- JSON-LD Schema Markup for SEO -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "SoftwareApplication",
      "name": "Rhapsody Framework",
      "description": "Rhapsody is a lightweight, modern PHP framework for building elegant and maintainable web applications. It provides a solid foundation with powerful features like a flexible router, a secure authentication system, a robust validation engine, and an efficient templating system powered by Twig.",
      "applicationCategory": "DeveloperApplication",
      "operatingSystem": "Web",
      "softwareVersion": "{{ config.app_version }}",
      "url": "{{ app_url }}",
      "author": {
        "@type": "Person",
        "name": "Andrew Rout"
      },
      "programmingLanguage": {
        "@type": "ComputerLanguage",
        "name": "PHP"
      },
      "image": "{{ app_url }}/public/img/logo.png",
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD"
      },
      "featureList": [
        "Service Container & Dependency Injection",
        "Expressive Routing",
        "Middleware Pipeline & Authentication",
        "The Rhapsody Console (CLI)",
        "Database Migrations",
        "Robust Validation Engine",
        "Twig Templating",
        "Performance Caching (Routes & Application)",
        "Tailwind CSS Integration"
      ]
    }
    </script>
</head>
<body class="bg-gray-200 dark:bg-gray-900 text-gray-800 dark:text-gray-200 font-sans transition-colors duration-700">
    <!-- Header, Main Content, Footer -->
    <header class="mb-6 px-8 py-4">
        <div class="flex justify-between items-center">
             <a href="{{ base_url }}/" class="flex items-center space-x-3 group">
                <svg class="h-12 w-12 text-blue-800 dark:text-blue-400 group-hover:text-pink-600 dark:group-hover:text-pink-400 transition-colors duration-300" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M30 85C20 75 22.5 57.5 35 50C47.5 42.5 60 50 60 50M60 50L75 25M60 50C60 60 50 72.5 40 75" stroke="currentColor" stroke-width="8" stroke-linecap="round" stroke-linejoin="round"/><path d="M75 25C77.5 22.5 80 25 77.5 27.5L62.5 42.5" stroke="currentColor" class="text-pink-500 dark:text-pink-400" stroke-width="8" stroke-linecap="round" stroke-linejoin="round"/></svg>
                <span class="text-4xl font-bold text-blue-800 dark:text-blue-400 group-hover:text-pink-600 dark:group-hover:text-pink-400 transition-colors duration-300">Rhapsody</span>
                {# <img src="{{ base_url }}/public/img/logo2.png"> #}
            </a>

            <div class="flex items-center space-x-1 p-1 bg-gray-300 dark:bg-gray-700 rounded-lg">
                <button id="theme-light" title="Light Mode" class="p-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" style="color: orange;"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 100 2h1z"/></svg></button>
                <button id="theme-dark" title="Dark Mode" class="p-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" style="color: yellow;"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" /></svg></button>
                <button id="theme-system" title="System Preference" class="p-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z" clip-rule="evenodd" /></svg></button>
            </div>
        </div>
        
        {# <nav class="mt-4 flex justify-between items-center">
            <div>
                <a href="{{ base_url }}/" class="text-blue-500 dark:text-blue-400 hover:underline mr-4">Home</a>
                <a href="{{ base_url }}/users" class="text-blue-500 dark:text-blue-400 hover:underline mr-4">Users</a>
                <a href="{{ base_url }}/contact" class="text-blue-500 dark:text-blue-400 hover:underline mr-4">Contact</a>
                <a href="{{ base_url }}/docs" class="text-blue-500 dark:text-blue-400 hover:underline">Docs</a>
            </div>
            <div>
                {% if auth.check %}
                    <span class="mr-4 text-gray-700 dark:text-gray-300">Welcome, {{ auth.user.name }}!</span>
                    <a href="{{ base_url }}/dashboard" class="text-blue-500 dark:text-blue-400 hover:underline mr-4">Dashboard</a>
                    <a href="{{ base_url }}/logout" class="text-blue-500 dark:text-blue-400 hover:underline">Logout</a>
                {% else %}
                    <a href="{{ base_url }}/login" class="text-blue-500 dark:text-blue-400 hover:underline mr-4">Login</a>
                    <a href="{{ base_url }}/register" class="text-blue-500 dark:text-blue-400 hover:underline">Register</a>
                {% endif %}
            </div>
        </nav> #}
    </header>

    {% block full_width_content %}{% endblock %}
    
    <div class="container mx-auto p-4 sm:p-6 lg:p-8">
        <main class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
            {% if flash.success %}
                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg relative mb-6" role="alert">
                    <strong class="font-bold">Success!</strong>
                    <span class="block sm:inline">{{ flash.success }}</span>
                </div>
            {% endif %}
            {% if flash.error %}
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative mb-6" role="alert">
                    <strong class="font-bold">Error!</strong>
                    <span class="block sm:inline">{{ flash.error }}</span>
                </div>
            {% endif %}
            {% block content %}{% endblock %}
        </main>
    </div>

    <div id="update-modal" class="absolute inset-0 z-50 hidden flex items-center justify-center p-4 bg-black bg-opacity-75" style="background-color: #000000cf;">
        <div id="update-modal-content" class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] flex flex-col">
            <div class="flex justify-between bg-pink-700 items-center p-4 border-b dark:border-gray-700">
                <h3 class="text-2xl font-bold text-white">Update Available</h3>
                <button id="close-update-modal" class="text-gray-200 hover:text-gray-700 dark:hover:text-white text-3xl leading-none">&times;</button>
            </div>
            <div class="p-6 overflow-y-auto">
                <h4 id="update-version-tag" class="text-xl font-bold mb-4"></h4>
                <div class="prose dark:prose-invert max-w-none">
                    <p>The following updates are available. It is recommended to run the update command from your terminal.</p>
                    <pre class="command-line"><code class="language-bash">php rhapsody app:update</code></pre>
                    <hr><br>
                    <h4>Release Notes:</h4>
                    <div id="update-release-notes" class="text-sm p-4 bg-gray-200 dark:bg-gray-900 dark:text-gray-200 rounded-md">
                        <p>Loading...</p>
                    </div>
                </div>
            </div>
            <div class="flex justify-end items-center p-4 bg-gray-50 dark:bg-gray-900 border-t dark:border-gray-700">
                <button id="close-update-modal-footer" class="bg-pink-700  hover:bg-gray-400 text-white font-bold py-2 px-4 rounded">
                    Close
                </button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const lightBtn = document.getElementById('theme-light');
            const darkBtn = document.getElementById('theme-dark');
            const systemBtn = document.getElementById('theme-system');
            
            const setActiveButton = (activeBtn) => {
                [lightBtn, darkBtn, systemBtn].forEach(btn => btn.classList.remove('theme-active'));
                if (activeBtn) activeBtn.classList.add('theme-active');
            };

            const applyTheme = (theme) => {
                if (theme === 'dark') {
                    document.documentElement.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                }
            };
            
            const updateUI = () => {
                const savedTheme = localStorage.getItem('theme');
                if (savedTheme === 'light') setActiveButton(lightBtn);
                else if (savedTheme === 'dark') setActiveButton(darkBtn);
                else setActiveButton(systemBtn);
            };

            lightBtn.addEventListener('click', () => {
                localStorage.setItem('theme', 'light');
                applyTheme('light');
                updateUI();
            });

            darkBtn.addEventListener('click', () => {
                localStorage.setItem('theme', 'dark');
                applyTheme('dark');
                updateUI();
            });

            systemBtn.addEventListener('click', () => {
                localStorage.removeItem('theme');
                const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
                applyTheme(systemTheme);
                updateUI();
            });

            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
                if (!localStorage.getItem('theme')) { // Only if "System" is active
                    applyTheme(e.matches ? 'dark' : 'light');
                }
            });

            updateUI(); // Set initial button state

            const updateLink = document.getElementById('update-notification-link');
            const updateModal = document.getElementById('update-modal');
            
            if (updateLink && updateModal) {
                const closeButtons = document.querySelectorAll('#close-update-modal, #close-update-modal-footer');
                const versionTagEl = document.getElementById('update-version-tag');
                const releaseNotesEl = document.getElementById('update-release-notes');

                updateLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    const newVersion = updateLink.dataset.version;
                    versionTagEl.textContent = `New Version: ${newVersion}`;
                    releaseNotesEl.innerHTML = '<p>Loading release notes...</p>';
                    updateModal.classList.remove('hidden');

                    // Fetch release notes from GitHub API
                    fetch('https://api.github.com/repos/arout/rhapsody/releases/latest')
                        .then(response => response.json())
                        .then(data => {
                            if (data.body) {
                                // A real implementation would parse Markdown, but for now we'll use a pre tag
                                // to preserve basic formatting.
                                releaseNotesEl.innerHTML = `<pre class="whitespace-pre-wrap text-sm">${data.body}</pre>`;
                            } else {
                                releaseNotesEl.textContent = 'No release notes were provided for this version.';
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching release notes:', error);
                            releaseNotesEl.textContent = 'Could not load release notes.';
                        });
                });

                const closeModal = () => {
                    updateModal.classList.add('hidden');
                };

                closeButtons.forEach(btn => btn.addEventListener('click', closeModal));
                
                // Also close if the user clicks on the dark overlay
                updateModal.addEventListener('click', (e) => {
                    if (e.target === updateModal) {
                        closeModal();
                    }
                });
            }
        });
    </script>
</body>
</html>