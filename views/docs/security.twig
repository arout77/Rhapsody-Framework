{% extends "docs/_layout.twig" %}
{% block doc_content %}
    <h1>Security</h1>
    <p>Rhapsody is built with security in mind and includes several features to help you protect your application from common vulnerabilities.</p>

    <h2>CSRF Protection</h2>
    <p>
        Cross-Site Request Forgery (CSRF) is an attack that tricks a user into performing unwanted actions. Rhapsody makes it easy to protect your application from these attacks.
    </p>
    <p>
        The <code>VerifyCsrfTokenMiddleware</code> is registered as a **global middleware**, which means it runs automatically on every request. It will automatically check for a valid CSRF token on all <code>POST</code> requests. If the token is missing or invalid, the request will be aborted with a "419 Page Expired" error.
    </p>
    <h3>Adding the CSRF Token to Forms</h3>
    <p>
        To make this work, you <strong>must</strong> include the <code>csrf_field()</code> Twig function inside every <code>&lt;form&gt;</code> that submits with `method="POST"`. This function generates a hidden input field containing the unique token for the user's session.
    </p>
    <pre><code class="language-twig">&lt;form action="/profile/update" method="POST"&gt;
    {{ csrf_field() }}

    &lt;!-- Your other form fields --&gt;
    &lt;button type="submit"&gt;Update Profile&lt;/button&gt;
&lt;/form&gt;</code></pre>
    <p>GET requests do not need CSRF protection.</p>

    <h2>Password Hashing</h2>
    <p>The framework uses PHP's native <code>password_hash()</code> and <code>password_verify()</code> functions for all user authentication. This ensures that passwords are never stored in plain text and are protected with a modern, secure hashing algorithm. Refer to the <code>app/Models/User.php</code> and <code>app/Controllers/AuthController.php</code> files for the implementation.</p>

{% endblock %}
