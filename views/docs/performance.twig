{% extends "docs/_layout.twig" %}

{% block doc_content %}
    <h1>Performance & Caching</h1>
    <p>
        Rhapsody includes several caching layers designed to significantly improve your application's speed and responsiveness, especially in a production environment. Understanding and utilizing these features is key to building a high-performance application. Caching is primarily managed through the Rhapsody Console.
    </p>

    <hr>

    <h2>Template Caching</h2>
    <p>
        <strong>Type:</strong> Automatic<br>
        <strong>Environment:</strong> Production & Development
    </p>
    <p>
        By default, the framework's Twig integration is configured to use a template cache. The first time a <code>.twig</code> file is requested, it's compiled into raw, optimized PHP and saved in the <code>storage/cache/</code> directory. On all subsequent requests, this pre-compiled PHP file is used directly, which is dramatically faster than re-parsing the Twig template every time.
    </p>
    <p>
        During development (when <code>APP_ENV=development</code>), Twig is smart enough to automatically check if your <code>.twig</code> file has changed and will re-compile it if necessary. In production, you may want to clear this cache during deployment.
    </p>

    <hr>

    <h2>Route Caching</h2>
    <p>
        <strong>Type:</strong> Manual (via CLI)<br>
        <strong>Environment:</strong> Production Recommended
    </p>
    <p>
        For a major performance boost in production, you can compile all of your application's route definitions from <code>routes/web.php</code> and <code>routes/api.php</code> into a single, optimized cache file. This prevents the framework from needing to read and parse multiple files on every single request.
    </p>
    <h3>Console Commands for Route Caching</h3>
    <p>You can manage the route cache using the following Rhapsody Console commands:</p>
    
    <h4>Generate the Route Cache</h4>
    <p>This command serializes all registered routes and saves them to <code>storage/cache/routes/routes.php</code>. This should be a part of your deployment process.</p>
    <pre class="command-line"><code class="language-bash">php rhapsody route:cache</code></pre>
    
    <h4>Clear the Route Cache</h4>
    <p>This command deletes the route cache file. This is necessary during development any time you add, remove, or change a route definition.</p>
    <pre class="command-line"><code class="language-bash">php rhapsody route:clear</code></pre>

    <hr>

    <h2>Application Cache</h2>
    <p>
        <strong>Type:</strong> Manual (in code)<br>
        <strong>Environment:</strong> Production & Development
    </p>
    <p>
        The framework provides a simple file-based application cache via the <code>Core\Cache</code> class. This is perfect for storing the results of expensive or time-consuming operations, such as complex database queries, calculations, or calls to external APIs. The application cache is stored in <code>storage/cache/app/</code>.
    </p>
    <h3>Using the `remember` Method</h3>
    <p>The <code>Cache::remember()</code> method is the primary way to interact with the application cache. It's a "cache-aside" implementation:
        <ol>
            <li>It checks if a value exists in the cache for the given key.</li>
            <li>If it exists and is not expired, it returns the cached value.</li>
            <li>If it does not exist (or has expired), it executes the provided function, saves its return value to the cache for a specified number of minutes, and then returns the value.</li>
        </ol>
    </p>
    <pre><code class="language-php">use Core\Cache;
use App\Models\Post;

class PostController extends BaseController
{
    public function __construct(protected Post $postModel, /*...*/) { /*...*/ }
    
    public function index()
    {
        // This query will only run if 'posts.all' is not in the cache
        // or has expired. Otherwise, the result is fetched directly from
        // a cache file, avoiding a database hit.
        $posts = Cache::remember('posts.all', 60, function () {
            return $this->postModel->findAll();
        });

        return $this->view('posts/index.twig', ['posts' => $posts]);
    }
}</code></pre>

    <h3>Console Command for Application Cache</h3>
    <p>You can flush the entire application cache (deleting all files in <code>storage/cache/app/</code>) using the console.</p>
    <pre class="command-line"><code class="language-bash">php rhapsody cache:clear</code></pre>

{% endblock %}