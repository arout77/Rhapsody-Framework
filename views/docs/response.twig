{% extends "docs/_layout.twig" %}

{% block doc_content %}
    <h1>The Response Object</h1>
    <p>
        All controller methods in Rhapsody must return an instance of the <code>Core\Response</code> object (or a class that extends it, like <code>RedirectResponse</code>). This object represents the complete HTTP response that will be sent back to the browser, including the content, status code, and headers.
    </p>

    <hr>

    <h2>Creating Responses</h2>
    <p>While you can create a <code>Response</code> object manually, it's usually more convenient to use the helper methods provided by the <code>BaseController</code>.</p>

    <h3>Returning a View</h3>
    <p>The <code>view()</code> helper creates a <code>Response</code> object, sets its content to the rendered Twig template, and sets the status code to 200 (OK).</p>
    <pre><code class="language-php">// In a controller
public function home(): Response
{
    return $this->view('home/welcome.twig', ['name' => 'John']);
}</code></pre>

    <h3>Returning JSON</h3>
    <p>The <code>json()</code> helper creates a <code>Response</code> object, JSON-encodes your data, and automatically sets the <code>Content-Type</code> header to <code>application/json</code>.</p>
    <pre><code class="language-php">// In an API controller
public function getUser(string $id): Response
{
    $user = $this->userModel->findById($id);
    
    if (!$user) {
        return $this->json(['error' => 'User not found'], 404); // Set a 404 status code
    }

    return $this->json($user); // Defaults to a 200 status code
}</code></pre>

    <hr>

    <h2>Redirecting Users</h2>
    <p>
        To redirect a user to another page, Rhapsody uses the <code>Core\RedirectResponse</code> class. The easiest way to create one is with the global <code>redirect()</code> helper function.
    </p>

    <h3>Basic Redirects</h3>
    <pre><code class="language-php">public function store(Request $request): Response
{
    // ... save data to the database ...
    
    return redirect('/users');
}</code></pre>
    
    <h3>Redirects with Flash Messages</h3>
    <p>
        Often, you'll want to send a "flash message" to display on the next page (e.g., "User created successfully!"). You can chain the <code>with()</code> method to your redirect to store a message in the session for one request.
    </p>
    <pre><code class="language-php">public function updateUser(Request $request, string $id): Response
{
    // ... update the user ...

    return redirect('/users/' . $id)
        ->with('success', 'Profile updated successfully!');
}</code></pre>
    <p>This message can then be displayed in your Twig template using the global <code>flash</code> variable.</p>

{% endblock %}