<?php
use Validate\Enums\Boolean;

function shutDown()
{
	/**
	 * PHP error types and values
	 * https://www.php.net/manual/en/errorfunc.constants.php
	 *
	 * 1	E_ERROR
	 * Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.
	 * 2	E_WARNING
	 * Run-time warnings (non-fatal errors). Execution of the script is not halted.
	 * 4	E_PARSE
	 * Compile-time parse errors. Parse errors should only be generated by the parser.
	 * 8	E_NOTICE
	 * Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script.
	 * 16	E_CORE_ERROR
	 * Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP.
	 * 32	E_CORE_WARNING
	 * Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP.
	 * 64	E_COMPILE_ERROR
	 * Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine.
	 * 128	E_COMPILE_WARNING
	 * Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine.
	 * 256	E_USER_ERROR
	 * User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error().
	 * 512	E_USER_WARNING
	 * User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error().
	 * 1024	E_USER_NOTICE
	 * User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error().
	 * 2048	E_STRICT
	 * Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code.
	 * 4096	E_RECOVERABLE_ERROR
	 * Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR.
	 * 8192	E_DEPRECATED
	 * Run-time notices. Enable this to receive warnings about code that will not work in future versions.
	 * 16384	E_USER_DEPRECATED
	 * User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error().
	 * 32767	E_ALL
	 * All errors, warnings, and notices.
	 *
	 */
	$error = error_get_last();

	$page500 = '<div style="background-image: url(' . SITE_URL . 'public/template/errors/img/e500.jpg); background-size: contain; background-repeat: no-repeat; height: 100%"><p><br></p></div>';

	switch ( $error['type'] )
	{
	case 1:
	case 4:
	case 16:
	case 64:
	case 256:
		echo $page500;
		break;

		// default:
		// 	throwGenericError();
	}
}
register_shutdown_function( 'shutDown' );

if ( strtoupper( $app['config']->setting( 'debug_mode' ) ) === Boolean::ON )
{
	// Start the timer for script exec time profiler
	$profiler = new Src\Profiler( $app, [] );
	$profiler->start_timer();
}

$maintenance_mode = Boolean::tryFrom( strtoupper( $app['config']->setting( 'maintenance_mode' ) ) );
if ( is_null( $maintenance_mode ) )
{
	exit( "Invalid value for maintenance mode. Valid settings are: 'ON' or 'OFF'" );
}

if ( $maintenance_mode->value === Boolean::ON )
{
	if ( $app['router']->controller_class !== 'Maintenance_Controller' &&
		$app['router']->controller_class !== 'Contact_Controller' )
	{
		header( 'Location: ' . $app['config']->setting( 'site_url' ) . 'maintenance' );
	}
}

$system_startup_check = Boolean::tryFrom( strtoupper( $app['config']->setting( 'system_startup_check' ) ) );
if ( is_null( $system_startup_check ) )
{
	exit( "Invalid value for system startup check. Valid settings are: 'ON' or 'OFF'" );
}

if ( $system_startup_check->value === Boolean::ON )
{
	require_once 'system_startup_check.php';
	exit;
}

if ( strtoupper( $app['config']->setting( 'debug_mode' ) ) === Boolean::ON )
{
	// Stop the timer for script exec time profiler
	$profiler->stop_timer();

	if ( ( round( $profiler->ram_usage() / 1024 ) ) <= 1023 )
	{
		$ram_usage = round( $profiler->ram_usage() / 1024 ) . ' kb';
	}
	else
	{
		$ram_usage = round( $profiler->ram_usage() / 1024 / 1024, 2 ) . ' MB';
	}

	if ( ( round( $profiler->ram_peak_usage() / 1024 ) ) <= 1023 )
	{
		$ram_peak_usage = round( $profiler->ram_peak_usage() / 1024 ) . ' kb';
	}
	else
	{
		$ram_peak_usage = round( $profiler->ram_peak_usage() / 1024 / 1024, 2 ) . ' MB';
	}

	// $sql = $profiler->get_sql();
	// var_dump($sql);exit;

	// $app['template']->assign('exec_time', $profiler->timer());
	// $app['template']->assign('ram_usage', $ram_usage);
	// $app['template']->assign('ram_peak_usage', $ram_peak_usage);
	// if( $app['config']->setting('debug_toolbar') == 'ON' )
	// {
	// 	$app['template']->display('template/debug_toolbar.tpl');
	// }
}
